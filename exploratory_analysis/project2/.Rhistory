p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("Plot1.R")
myedit("Plot1.R")
myedit("plot1.R")
pathtofile("plot1.R", local = TRUE)
source("plot1.R", local = TRUE)
source("Plot1.R", local = TRUE)
source(pathtofile("Plot1.R"), local = TRUE)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLables.R")
myedit("myLabels.R")
source(pathtofile("mylabels.R"), local = TRUE)
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, data=diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, data=diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
load(swirl)
library(swirl)
swirl()
colors()
sample(colors(), 10)
c("red", "blue")
colorRamp(c("red", "blue"))
pal <- colorRamp(c("red", "blue"))
pal[0]
pal(0)
pal(1)
pal(seq(0,1, len=6))
o1 <- colorRampPalette(c("red", "blue"))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), 0.5)
p3 <- colorRampPalette(c("blue", "green"), alpha=.5)
p3(5)
plort(x,y,pch=19,col=c(0,.5,.5))
plot(x,y,pch=19,col=c(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5, alpha = .3))
cols <- brewer.pal(3, "Bugn")
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color=drv)
qplot(displ, hwy, data = mpg, color=drv, geom=c("point", "smooth"))
qplot(hwy, data=mpg, color=drv)
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
qplot(data ~ displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv)
ggplot2(aes=(mpg, displ~hwy))
ggplot2(aes=(mpg, displ, hwy))
ggplot2(aes=(data=mpg, displ~hwy))
ggplot2(aes(data=mpg, displ~hwy))
ggplot(aes(data=mpg, displ~hwy))
ggplot(aes(data=mpg, displ,hwy))
ggplot(aes(mpg, displ,hwy))
ggplot(aes(mpg, displ~hwy))
aes(data=mpg, displ~hwy)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
print(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=.5)
g+geom_point(size=4, alpha=.5, aes=(color=drv))
g+geom_point(size=4, alpha=.5, aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!",x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(size=2, alpha=.5, aes(color=drv))+geom_smooth(size=4, linetype=3, method="lm", se=Faluse)
g+geom_point(size=2, alpha=.5, aes(color=drv))+geom_smooth(size=4, linetype=3, method="lm", se=False)
g+geom_point(size=2, alpha=.5, aes(color=drv))+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(color=drv)+theme_bw(base_family="Times")
g+geom_point(aes(color=drv)+theme_bw(base_family="Times")
g+geom_point(aes(color=drv)+theme_bw(base_family="Times")
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g<- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
ggplot(mpg, aes(x=displ, y=hwy, color=factor(year))
)
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year))
)
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price,data=diamonds)
range(now=diamond$price)
range(now=diamonds$price)
range(diamonds$price)
qplot(price,data=diamonds, binwidth=18497/30)
brk
counts
qplot(price,data=diamonds, binwidth=18497/30, fill=cut)
qplot(price,data=diamonds, geom="density")
qplot(price,data=diamonds, geom="density", color=cut)
qplot(carat, price, data=dataset)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth="lm")
qplot(carat, price, data=diamonds, color=cut)+geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets=.~cut)+geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g<- ggplot(data=diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot+facet_grid(.~cut)
ggplot(diamonds, aes(carat, price))+geom_boxplot(+facet_grid(.~cut)
ggplot(diamonds, aes(carat, price))+geom_boxplot+facet_grid(.~cut)
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="blue")
abline(h=0.4, col="red")
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdis(x, y, cx, cy)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
plots(x, y, pch=19, cex=2, col=cols1[newClust])
plot(x, y, pch=19, cex=2, col=cols1[newClust])
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, cols1=[newClust2])
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
plot(finalCx, finalCy, col=cols1, pach=9, cex=2, lwd=2)
points(finalCx, finalCy, col=cols1, pach=9, cex=2, lwd=2)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "read", "green"), pch =3, cex=3, lwd=3)
points(kmObj$centers, col=c("black", "red", "green"), pch =3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
bye()
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol=2, matrix(rnom(100, mean=1, sd=0.3), ncol=2)))
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol=2, matrix(rnorm(100, mean=1, sd=0.3), ncol=2)))
x
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol=2), matrix(rnorm(100, mean=1, sd=0.3), ncol=2))
x
fit <- kmeans(x, 10)
fit
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c('clusters', 'sumsquares')))
for(i in 2:15){}
results <- matrix(nrow=14, ncol=2, dilnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
result[i-1, 2] <- fit$totss
}
plot(results)
results <- matrix(nrow=14, ncol=2, dilnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
result[i-1, 2] <- fit$totss
}
plot(results)
results <- matrix(nrow=14, ncol=2, dilnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
result[i-1, 2] <- fit$totss
}
plot(results)
results <- matrix(nrow=14, ncol=2, dilnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
result[i-1, 2] <- fit$totss
}
plot(results)
results <- matrix(nrow=14, ncol=2, dilnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
results
plot(results)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
kmeans(x, 2)
kmeans(x, 3)
kmeans(x, 4)
kmeans(x, 5)
kmeans(x, 10)
kmeans(x, 11)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$betweenss/fit$totss
}
plot(results)
kmeans(x, 15)
kmeans(x, 20)
kmeans(x, 10)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$withinss
}
plot(results)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
results <- matrix(nrow=14, ncol=2, dimnames=list(2:15, c("clusters",
"sumsquares")))
for (i in 2:15){
fit <- kmeans(x, i)
results[i-1, 1] <- i
results[i-1, 2] <- fit$totss
}
plot(results)
plot(fit, col=fit$cluster)
plot(x[0], x[1], col=fit$cluster)
x
plot(x[,0], x[,1], col=fit$cluster)
ggplot(x[,0], x[,1], col=fit$cluster)
gplot(x[,0], x[,1], col=fit$cluster)
len(x[,0])
length(x[,0])
length(x[,1])
gplot(x[,1], x[,2], col=fit$cluster)
plot(x[,1], x[,2], col=fit$cluster)
plot(x[,1], x[,2], col=fit$cluster, pch=19)
plot(x[,1], x[,2], col=fit$cluster, pch=19, alpha=0.5)
res <- ggplot(aes(x[,1], x[,2]))
plot(x[,1], x[,2], colorRamp()=fit$cluster, pch=10)
plot(x[,1], x[,2], col=fit$cluster, pch=10)
plot(x[,1], x[,2], col=fit$cluster, pch=19)
swirl()
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% matv
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(mat)
prcomp(scale(mat)
)
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
AL <- (svd1$u[,1]*svd1$d[1]) %*% t(svd1$v)
a1 <- (svd1$u[,1]*svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a1 <- svd1$u[,1] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a1 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a1 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,2:5] %*% diag(svd1$d[2:5]) %*% t(svd1$v[,2:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
setwd("Respository/coursera/exploratory_analysis/project2/")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
# check if there are missing values
sum(is.na(NEI$Emissions)) # = 0, no missing value
# total emissions by year
y1999 <- unique(subset(NEI, year==1999, Emissions))
y2002 <- unique(subset(NEI, year==2002, Emissions))
y2005 <- unique(subset(NEI, year==2005, Emissions))
y2008 <- unique(subset(NEI, year==2008, Emissions))
sum1999 <- sum(y1999)
sum2002 <- sum(y2002)
sum2005 <- sum(y2005)
sum2008 <- sum(y2008)
# plot
year <- cbind(c("1999", "2002", "2005", "2008"))
total_emission <- cbind(year, c(sum1999, sum2002, sum2005, sum2008))
png(file = "plot1.png", width = 480, height = 480)
plot(as.Date(total_emission[, 1], '%Y'), as.double(total_emission[, 2]),
xlab='Year', ylab='Total emission', main= 'Total PM2.5 emission by year',
pch=19, type = "n")
dev.off()
plot(as.Date(total_emission[, 1], '%Y'), as.double(total_emission[, 2]),
xlab='Year', ylab='Total emission', main= 'Total PM2.5 emission by year',
pch=19, type = "b,c")
plot(as.Date(total_emission[, 1], '%Y'), as.double(total_emission[, 2]),
xlab='Year', ylab='Total emission', main= 'Total PM2.5 emission by year',
pch=19, type = "b,c", col="blue")
year <- cbind(c("1999", "2002", "2005", "2008"))
total_emission <- cbind(year, c(sum1999, sum2002, sum2005, sum2008))
png(file = "plot1.png", width = 480, height = 480)
plot(as.Date(total_emission[, 1], '%Y'), as.double(total_emission[, 2]),
xlab='Year', ylab='Total emission', main= 'Total PM2.5 emission by year',
pch=19, type = "b,c", col="blue")
dev.off()
sum(is.na(NEI$Emissions)) # = 0, no missing value
# total emissions by year
y1999 <- unique(subset(NEI, year==1999, Emissions))
y2002 <- unique(subset(NEI, year==2002, Emissions))
y2005 <- unique(subset(NEI, year==2005, Emissions))
y2008 <- unique(subset(NEI, year==2008, Emissions))
sum1999 <- sum(y1999)
sum2002 <- sum(y2002)
sum2005 <- sum(y2005)
sum2008 <- sum(y2008)
# plot
year <- cbind(c("1999", "2002", "2005", "2008"))
total_emission <- cbind(year, c(sum1999, sum2002, sum2005, sum2008))
png(file = "plot1.png", width = 480, height = 480)
plot(as.Date(total_emission[, 1], '%Y'), as.double(total_emission[, 2]),
xlab='Year', ylab='Total emission', main= 'Total PM2.5 emission by year',
pch=19, type = "b,c", col="blue")
dev.off()
# check if there are missing values
sum(is.na(NEI$Emissions)) # = 0, no missing value
# total emissions by year in Baltimore City
Baltimore <- unique(subset(NEI, fips=="24510", c(Emissions, year)))
emission_by_year <- tapply(Baltimore$Emissions, Baltimore$year, FUN=sum)
# plot
png(file = "plot2.png", width = 480, height = 480)
plot(as.Date(rownames(emission_by_year), '%Y'), as.double(emission_by_year),
xlab='Year', ylab='Total emission', main= 'Total PM2.5 emission by year in
Baltimore City', pch=19, type = "b,c", col="blue")
dev.off()
